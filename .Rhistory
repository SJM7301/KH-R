print(result)
sink('search.txt', append = T)
print(result)
sink()
write.xlsx(result, 'search.xlsx', row.names = F)
input.type <- dlgInput('Input type')$res
input.city <- dlgInput('Input MPG.city')$res
input.city <- as.numeric(input.city)
result <- subset(carprice.new, Type == input.type & MPG.city >= input.city)
print(result)
sink('search.txt', append = T)
print(result)
sink()
write.xlsx(result, 'search.xlsx', row.names = F)
input.type <- dlgInput('Input type')$res
input.city <- dlgInput('Input MPG.city')$res
input.city <- as.numeric(input.city)
result <- subset(carprice.new, Type == input.type & MPG.city >= input.city)
print(result)
sink('search.txt', append = T)
print(result)
sink()
write.xlsx(result, 'search.xlsx', row.names = F)
#(1)
library(svDialogs)
input.value <- dlgInput('Input a value')$res
#(5)
library(xlsx)
ds <- read.xlsx('data.xlsx', header = T, sheetIndex = 1)
library(xlsx)
ds <- read.xlsx('data.xlsx', header = T, sheetIndex = 1)
ds <- read.xlsx('search.xlsx', header = T, sheetIndex = 1)
write.xlsx(ds, 'data_new.txt', row.names = F)
library(xlsx)
ds <- read.xlsx('search.xlsx', header = T, sheetIndex = 1)
write.xlsx(ds, 'data_new.txt', row.names = F)
library(xlsx)
ds <- read.xlsx('search.xlsx', header = T, sheetIndex = 1)
write.xlsx(ds, 'data_new.txt', row.names = F)
write.xlsx(ds, 'search_new.txt', row.names = F)
write.xlsx(ds, 'search_new.txt', row.names = F)
ds <- read.xlsx('search.xlsx', header = T, sheetIndex = 1)
write.xlsx(ds, 'search_new.txt', row.names = F)
#(6)
sink('result.txt', append = T)
cat(height, weight, bmi)
#p223 LAB
library(svDialogs)
height <- dlgInput('Input height(cm)')$res
weight <- dlgInput('Input weight(kg)')$res
height <- as.numeric(height)
weight <- as.numeric(weight)
height <- height / 100
bmi <- weight / (height^2)
sink('bmi.txt', append = T)
cat(height * 100, weight, bmi)
cat('\n')
sink()
height <- dlgInput('Input height(cm)')$res
weight <- dlgInput('Input weight(kg)')$res
height <- as.numeric(height)
weight <- as.numeric(weight)
height <- height / 100
bmi <- weight / (height^2)
sink('bmi.txt', append = T)
cat(height * 100, weight, bmi)
cat('\n')
sink()
result <- read.table('bmi.txt', sep = " ")
result
names(result) <- c('height', 'weight', 'bmi')
write.table(result, 'bmi_new.txt', row.names = F)
cat('입력한 키는 ', height * 100, 'cm, 몸무게는 ', weight, 'kg 입니다.\n', sep = "")
cat('BMI는 ', bmi, '입니다.', sep = "")
sink('result.txt', append = T)
cat(height, weight, bmi)
#p225 실전 분석
library(svDialogs)
library(xlsx)
carprice.new <- read.csv('carprice.csv', header = T)
carprice.new
str(carprice.new)
input.type <- dlgInput('Input type')$res
input.city <- dlgInput('Input MPG.city')$res
input.city <- as.numeric(input.city)
result <- subset(carprice.new, Type == input.type & MPG.city >= input.city)
print(result)
sink('search.txt', append = T)
print(result)
sink()
write.xlsx(result, 'search.xlsx', row.names = F)
#(5)
library(xlsx)
ds <- read.xlsx('search.xlsx', header = T, sheetIndex = 1)
write.xlsx(ds, 'search_new.txt', row.names = F)
sink()
base <- dlgInput('삼각형의 밑변 입력')$res
height <- dlgInput('삼각형의 높이 입력')$res
base <- as.numeric(base)
height <- as.numeric(height)
area <- 1 / 2 * base * height
area
cat('삼각형의 넓이 = ', area)
library(svDialogs)
base <- dlgInput('삼각형의 밑변 입력')$res
height <- dlgInput('삼각형의 높이 입력')$res
base <- as.numeric(base)
height <- as.numeric(height)
area <- 1 / 2 * base * height
area
cat('삼각형의 넓이 = ', area)
area <- (1 / 2) * base * height
area
cat('삼각형의 넓이 = ', area)
library(svDialogs)
base <- dlgInput('삼각형의 밑변 입력')$res
height <- dlgInput('삼각형의 높이 입력')$res
base <- as.numeric(base)
height <- as.numeric(height)
area <- (1 / 2) * base * height
area
cat('삼각형의 넓이 = ', area)
area
(1 / 2) * base * height
sink()
cat('삼각형의 넓이 = ', area)
area
#(8)
read.table('ds_tab.txt', sep = "\t", header = F)
#(8)
read.table('ds_tab.txt', sep = "\t", header = F)
#(8)
read.table('ds_tab.txt', sep = "\t", header = F)
#(8)
read.table('ds_tab.txt', sep = "\t", header = F)
#(9)
ds <- read.table('ds.txt', sep = ' ', header = F)
ds
write.csv(ds, 'ds.csv', row.names = F)
#(10)
library(xlsx)
write.xlsx(iris, 'iris.xlsx', row.names = F)
new.iris <- read.xlsx('iris.xlsx', sheetIndex = 1)
new.iris
#(11)
library(svDialogs)
sink('log.txt')
cat('----- x * y ----- \n')
sink()
x <- as.numeric(dlgInput('Input x')$res)
x <- as.numeric(dlgInput('Input x')$res)
y <- as.numeric(dlgInput('Input y')$res)
sink('log.txt')
cat('x = ', x, 'y = ', y, 'result = ', x * y)
sink()
sink('log.txt', append = T)
library(svDialogs)
sink('log.txt')
cat('----- x * y ----- \n')
sink()
x <- as.numeric(dlgInput('Input x')$res)
y <- as.numeric(dlgInput('Input y')$res)
sink('log.txt', append = T)
cat('x = ', x, 'y = ', y, 'result = ', x * y)
sink()
#p241 LAB
library(svDialogs)
#p241 LAB
library(svDialogs)
purchase <- dlgInput('Emter the purchase amount')$res
purchase <- as.numeric(purchase)
type <- NULL
ratio <- NULL
NULLif(purchase >= 30000){
if(purchase >= 30000) {
type <- '플래티넘'
ratio <- 0.07
} else if(purchase >= 20000) {
type <- '골드'
ratio <- 0.05
} else if(purchase >= 20000) {
type <- '실버'
ratio <- 0.03
} else {
type <- '프렌즈'
ratio <- 0.01
}
if(purchase >= 30000) {
type <- '플래티넘'
ratio <- 0.07
} else if(purchase >= 20000) {
type <- '골드'
ratio <- 0.05
} else if(purchase >= 20000) {
type <- '실버'
ratio <- 0.03
} else {
type <- '프렌즈'
ratio <- 0.01
}
purchase
type
cat('고객님은 ', type, '회원으로 구매액의 ', ratio * 100, '%가 적립됩니다.')
sink()
cat('고객님은 ', type, '회원으로 구매액의 ', ratio * 100, '%가 적립됩니다.')
for(i in 1:5){
print('*')
}
dim(iris)
norow <- nrow(iris)
norow
mylable <- c()
for(i in 1:norow)
norow <- nrow(iris)
norow
mylable <- c()
for(i in 1:norow) {
if(iris$Petal.Length[i] <= 1.6) {
mylable[i] <- 'L'
} else if(iris$Petal.Length[i] <= 5.1) {
mylable[i] <- 'H'
} else {
mylable[i] <- 'M'
}
}
print(mylable)
newds <- data.frame(iris$Petal.Length, mylable)
head(newds)
norow <- nrow(iris)
norow
mylable <- c()
for(i in 1:norow) {
if(iris$Petal.Length[i] <= 1.6) {
mylable[i] <- 'L'
} else if(iris$Petal.Length[i] >= 5.1) {
mylable[i] <- 'H'
} else {
mylable[i] <- 'M'
}
}
print(mylable)
newds <- data.frame(iris$Petal.Length, mylable)
head(newds)
norow <- nrow(iris)
norow
mylable <- c()
for(i in 1:norow) {
if(iris$Petal.Length[i] <= 1.6) {
mylable[i] <- 'L'
} else if(iris$Petal.Length[i] >= 5.1) {
mylable[i] <- 'H'
} else {
mylable[i] <- 'M'
}
}
print(mylable)
newds <- data.frame(iris$Petal.Length, mylable)
head(newds)
norow <- nrow(iris)
norow
mylable <- c()
for(i in 1:norow) {
if(iris$Petal.Length[i] <= 1.6) {
mylable[i] <- 'L'
} else if(iris$Petal.Length[i] >= 5.1) {
mylable[i] <- 'H'
} else {
mylable[i] <- 'M'
}
}
print(mylable)
newds <- data.frame(iris$Petal.Length, mylable)
head(newds)
determine <- function(score){}
#261 LAB
determine <- function(score){
total <- apply(score, 1, sum)
scoreset <- cbind(score, total)
result <- c()
for(i in 1:nrow(scoreset)){
if(scoreset[i, 1] < 20 * 0.4 | scoreset[i, 2] < 20 * 0.4 | scoreset[i, 3] < 60 * 0.4){
result[i] <- '불합격'
} else if(scoreset[i, 4] >= 60){
result[i] <- '합격'
} else {
result[i] <- '불합격'
}
cat(i, '번째 응시생은', result[i], '입니다.\n')
}
return(result)
}
source('myfunc.R')
source('myfunc.r')
sub1 <- c(14, 16, 12, 20, 8, 6, 12, 18, 16, 10)
#261 LAB
determine <- function(score){
total <- apply(score, 1, sum)
scoreset <- cbind(score, total)
result <- c()
for(i in 1:nrow(scoreset)){
if(scoreset[i, 1] < 20 * 0.4 | scoreset[i, 2] < 20 * 0.4 | scoreset[i, 3] < 60 * 0.4){
result[i] <- '불합격'
} else if(scoreset[i, 4] >= 60){
result[i] <- '합격'
} else {
result[i] <- '불합격'
}
cat(i, '번째 응시생은', result[i], '입니다.\n')
}
return(result)
}
source('myfunc.r')
result <- determine(score)
#261 LAB
determine <- function(score){
total <- apply(score, 1, sum)
scoreset <- cbind(score, total)
result <- c()
for(i in 1:nrow(scoreset)){
if(scoreset[i, 1] < 20 * 0.4 | scoreset[i, 2] < 20 * 0.4 | scoreset[i, 3] < 60 * 0.4){
result[i] <- '불합격'
} else if(scoreset[i, 4] >= 60){
result[i] <- '합격'
} else {
result[i] <- '불합격'
}
cat(i, '번째 응시생은', result[i], '입니다.\n')
}
return(result)
}
source('myfunc.R')
#261 LAB
determine <- function(score){
total <- apply(score, 1, sum)
scoreset <- cbind(score, total)
result <- c()
for(i in 1:nrow(scoreset)){
if(scoreset[i, 1] < 20 * 0.4 | scoreset[i, 2] < 20 * 0.4 | scoreset[i, 3] < 60 * 0.4){
result[i] <- '불합격'
} else if(scoreset[i, 4] >= 60){
result[i] <- '합격'
} else {
result[i] <- '불합격'
}
cat(i, '번째 응시생은', result[i], '입니다.\n')
}
return(result)
}
source('myfunc.R')
getwd()
setwd('C:\\Rcode')
getwd()
source('myfunc.R')
sub1 <- c(14, 16, 12, 20, 8, 6, 12, 18, 16, 10)
sub2 <- c(18, 14, 14, 16, 10, 12, 10, 20, 14, 14)
sub3 <- c(44, 38, 30, 48, 42, 50, 36, 52, 54, 32)
score <- data.frame(sub1, sub2, sub3)
result <- determine(score)
result
score <- c(76, 84, 69, 50, 95, 60, 82, 71, 88, 84)
which(score == 69)
which(score>=85)
max(score)
which.max(score)
min(seroce)
min(score)
which.min(score)
score <- c(76, 84, 69, 50, 95, 60, 82, 71, 88, 84)
idx <- which(scorev+60)
score[idx] <- 61
score
idx <- which(score+60)
idx <- which(score<=60)
score[idx] <- 61
score
idx <- which(score>=80)
score.high <- score[idx]
score.high
#p267 LAB
install.packages('Stat2Data')
library(Stat2Data)
data(ChildSpeaks)
str(ChildSpeaks)
idx <- which(ChildSpeaks$Age < 9)
ChildSpeaks[idx, 'm1'] <- 5
idx <- which(ChildSpeaks$Age < 9)
ChildSpeaks[idx, 'm1'] <- 5
idx <- which(ChildSpeaks$Age >= 9 & ChildSpeaks$Age < 15)
ChildSpeaks[idx, 'm1'] <- 4
idx <- which(ChildSpeaks$Age >= 15 & ChildSpeaks$Age < 21)
ChildSpeaks[idx, 'm1'] <- 3
idx <- which(ChildSpeaks$Age >= 21 & ChildSpeaks$Age < 27)
ChildSpeaks[idx, 'm1'] <- 2
idx <- which(ChildSpeaks$Age >= 27)
ChildSpeaks[idx, 'm1'] <- 1
head(ChildSpeaks)
ChildSpeaks$m2 <- NA
head(ChildSpeaks)
head(ChildSpeaks)
ChildSpeaks$m2 <- NA
head(ChildSpeaks)
idx <- which(ChildSpeaks$Gesell < 70)
ChildSpeaks$m2[idx] <- 1
idx <- which(ChildSpeaks$Gesell < 70 & ChildSpeaks$Gesell < 90)
ChildSpeaks$m2[idx] <- 2
idx <- which(ChildSpeaks$Gesell < 90 & ChildSpeaks$Gesell < 110)
ChildSpeaks$m2[idx] <- 3
idx <- which(ChildSpeaks$Gesell < 110 & ChildSpeaks$Gesell < 130)
ChildSpeaks$m2[idx] <- 4
idx <- which(ChildSpeaks$Gesell < 130)
ChildSpeaks$m2[idx] <- 5
head(ChildSpeaks)
ChildSpeaks$total <- ChildSpeaks$m1 + ChildSpeaks$m2
ChildSpeaks$result <- NA
ChildSpeaks
idx <- which(ChildSpeaks$Gesell < 70)
ChildSpeaks$m2[idx] <- 1
idx <- which(ChildSpeaks$Gesell >= 70 & ChildSpeaks$Gesell < 90)
ChildSpeaks$m2[idx] <- 2
idx <- which(ChildSpeaks$Gesell >= 90 & ChildSpeaks$Gesell < 110)
ChildSpeaks$m2[idx] <- 3
idx <- which(ChildSpeaks$Gesell >= 110 & ChildSpeaks$Gesell < 130)
ChildSpeaks$m2[idx] <- 4
idx <- which(ChildSpeaks$Gesell >= 130)
ChildSpeaks$m2[idx] <- 5
ChildSpeaks
head(ChildSpeaks)
ChildSpeaks$result[idx] <- '매우느림'
ChildSpeaks
ChildSpeaks$total <- ChildSpeaks$m1 + ChildSpeaks$m2
ChildSpeaks$result <- NA
idx <- which(ChildSpeaks$total < 3)
ChildSpeaks$result[idx] <- '매우느림'
idx <- which(ChildSpeaks$total >= 3 & ChildSpeaks$total < 5)
ChildSpeaks$result[idx] <- '느림'
idx <- which(ChildSpeaks$total >= 5 & ChildSpeaks$total < 7)
ChildSpeaks$result[idx] <- '보통'
idx <- which(ChildSpeaks$total >= 7 & ChildSpeaks$total < 9)
ChildSpeaks$result[idx] <- '빠름'
idx <- which(ChildSpeaks$total >= 9)
ChildSpeaks$result[idx] <- '매우빠름'
ChildSpeaks
ChildSpeaks[which.min(ChildSpeaks$total),]
ChildSpeaks
ChildSpeaks[which.min(ChildSpeaks$total),]
if(n %% 2 == 1){
type <- 'odd'
} else{
type <- 'even'
}
n <- 12
if(n %% 2 == 1){
type <- 'odd'
} else{
type <- 'even'
}
print(type)
#(2)
res <- ifelse(n < 0, -n, n)
res
#(3)
input <- 1:10
n <- length(input)
n <- length(input)
switch <- T
switch <- TRUE
input <- 1:10
n <- length(input)
switch <- TRUE
if(switch == T){
for(i in 1:n){
result <- result * i
}
} else {
result <- sum(input)
}
input <- 1:10
n <- length(input)
switch <- TRUE
if(switch == T){
for(i in 1:n){
result <- result * i
}
} else {
result <- sum(input)
}
result <- result * i
result <- 1
input <- 1:10
n <- length(input)
switch <- TRUE
result <- 1
if(switch == T){
for(i in 1:n){
result <- result * i
}
} else {
result <- sum(input)
}
print(result)
#(4)
n <- seq(1, 20, by = 2)
n
res <- 1;
n <- seq(1, 20, by = 2)
n
res <- 1;
for(i in n){
res <- i * n
}
res
res <- 1;
